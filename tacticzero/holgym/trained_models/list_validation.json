["LIST_REL (R :\u03b1 -> \u03b2 -> bool) (xs :\u03b1 list) ((h :\u03b2)::(t :\u03b2 list)) \u21d4 \u2203(h' :\u03b1) (t' :\u03b1 list). xs = h'::t' \u2227 R h' h \u2227 LIST_REL R t' t", "\u2200(x :\u03b1) (n :num) (ys :\u03b1 list). LENGTH (LUPDATE x n ys) = LENGTH ys", "\u2200(l :num list). SUM (REVERSE l) = SUM l", "\u2200(x :\u03b1) (l :\u03b1 list). MEM x l \u21d4 FOLDR $\\/ F (MAP ($= x) l)", "\u2200(P :\u03b1 -> bool) (l :\u03b1 list). FILTER P l \u2260 ([] :\u03b1 list) \u21d4 \u2203(x :\u03b1). MEM x l \u2227 P x", "(0 :num) = LENGTH (l :\u03b1 list) \u21d4 l = ([] :\u03b1 list)", "\u2200(L :num list) (n :num). SUM_ACC L n = SUM L + n", "\u2200(l :(\u03b1 # \u03b2) list). LENGTH (UNZIP_SND l) = LENGTH l", "\u2200(l1 :\u03b1 list) (l2 :\u03b1 list). ALL_DISTINCT (l1 ++ l2) \u21d4 ALL_DISTINCT l1 \u2227 ALL_DISTINCT l2 \u2227 \u2200(e :\u03b1). MEM e l1 \u21d2 \u00acMEM e l2", "\u2200(P :\u03b1 -> bool) (l :\u03b1 list). LENGTH (FILTER P l) \u2264 LENGTH l", "\u2200(n :num) (l :\u03b1 list). n \u2264 LENGTH l \u21d2 TAKE n (REVERSE l) = REVERSE (LASTN n l)", "\u2200(l :\u03b1 list) (m :num) (x :\u03b1). MEM x (DROP m l) \u21d2 MEM x l", "\u2200(n :num) (l :\u03b1 list). n \u2264 LENGTH l \u21d2 BUTLASTN n l = TAKE (LENGTH l \u2212 n) l", "\u2200(g :\u03b1 -> \u03b1 -> \u03b1) (f :\u03b2 -> \u03b1 -> \u03b1). FCOMM g f \u21d2 \u2200(e :\u03b1). LEFT_ID g e \u21d2 \u2200(l :\u03b2 list list). FOLDR f e (FLAT l) = FOLDR g e (MAP (FOLDR f e) l)", "(\u2200(l :\u03b1 list). DROP (0 :num) l = l) \u2227 \u2200(n :num) (x :\u03b1) (l :\u03b1 list). DROP (SUC n) (x::l) = DROP n l", "NULL ([] :\u03b1 list) \u2227 \u2200(h :\u03b1) (t :\u03b1 list). \u00acNULL (h::t)", "GENLIST (f :num -> \u03b1) (0 :num) = ([] :\u03b1 list) \u2227 GENLIST f (NUMERAL (n :num)) = GENLIST_AUX f (NUMERAL n) ([] :\u03b1 list)", "\u2200(n :num). n \u2260 (0 :num) \u21d2 COUNT_LIST n = (0 :num)::MAP SUC (COUNT_LIST (n \u2212 (1 :num)))", "\u2200(n :num) (l1 :\u03b1 list) (l2 :\u03b1 list). TAKE n (l1 ++ l2) = TAKE n l1 ++ TAKE (n \u2212 LENGTH l1) l2", "\u2200(l :\u03b1 list list). LENGTH (FLAT l) = SUM (MAP (LENGTH :\u03b1 list -> num) l)", "\u2200(f :\u03b1 -> \u03b2) (n :num) (l :\u03b1 list). MAP f (TAKE n l) = TAKE n (MAP f l)", "\u2200(l1 :\u03b1 list) (l2 :\u03b1 list). l1 \u2260 l2 \u21d2 \u2200(h1 :\u03b1) (h2 :\u03b1). h1::l1 \u2260 h2::l2", "TAKE (0 :num) (l :\u03b1 list) = ([] :\u03b1 list)", "\u2200(P :\u03b2 -> bool) (f :\u03b1 -> \u03b2) (l :\u03b1 list). EXISTS P (MAP f l) \u21d4 EXISTS (\u03bb(x :\u03b1). P (f x)) l", "MAP (SND :\u03b2 # \u03b1 -> \u03b1) (FILTER (\u03bb((x :\u03b2),(y :\u03b1)). y \u2260 (z :\u03b1)) (ls :(\u03b2 # \u03b1) list)) = FILTER (\u03bb(y :\u03b1). z \u2260 y) (MAP (SND :\u03b2 # \u03b1 -> \u03b1) ls)", "\u2200(f :\u03b1 -> \u03b2 -> \u03b2) (e :\u03b2) (g :\u03b3 -> \u03b1) (l :\u03b3 list). FOLDR f e (MAP g l) = FOLDR (\u03bb(x :\u03b3) (y :\u03b2). f (g x) y) e l", "REPLICATE (x :num) (y :\u03b1) = ([] :\u03b1 list) \u21d4 x = (0 :num)", "\u2200(n :num). LENGTH (l1 :\u03b1 list) < n \u21d2 TAKE n (l1 ++ (l2 :\u03b1 list)) = l1 ++ TAKE (n \u2212 LENGTH l1) l2", "\u2200(l1 :\u03b1 list) (l2 :\u03b2 list). LENGTH l1 = LENGTH l2 \u21d2 LENGTH (ZIP (l1,l2)) = LENGTH l1 \u2227 LENGTH (ZIP (l1,l2)) = LENGTH l2", "\u2200(ls :\u03b1 list) (n :num). DROP n ls = ([] :\u03b1 list) \u21d4 LENGTH ls \u2264 n", "\u2200(n :num) (x :\u03b1). SNOC x (REPLICATE n x) = REPLICATE (SUC n) x", "\u2200(l1 :\u03b1 list) (l2 :\u03b1 list). \u00acNULL l1 \u21d2 ELL (LENGTH l2) (l1 ++ l2) = LAST l1", "\u2200(l :\u03b1 list). NULL l \u21d4 FOLDL (\u03bb(x :bool) (l' :\u03b1). F) T l", "(\u2200(x :\u03b1). LAST [x] = x) \u2227 \u2200(h1 :\u03b2) (h2 :\u03b2) (t :\u03b2 list). LAST (h1::h2::t) = LAST (h2::t)", "\u2200(P :\u03b1 -> bool) (l :\u03b1 list). FILTER P l = FOLDR (\u03bb(x :\u03b1) (l' :\u03b1 list). if P x then x::l' else l') ([] :\u03b1 list) l", "\u2200(P :\u03b1 -> bool) (l :\u03b1 list). EXISTS P l \u21d4 FOLDR (\u03bb(x :\u03b1) (l' :bool). P x \u2228 l') F l", "\u2200(n :num). TAKE n ([] :\u03b1 list) = ([] :\u03b1 list)", "\u2200(l2 :\u03b1 list) (l1 :\u03b1 list). IS_SUFFIX (REVERSE l1) (REVERSE l2) \u21d4 l2 \u227c l1", "\u2200(n :num) (m :num) (l :\u03b1 list). n + m \u2264 LENGTH l \u21d2 LASTN n (BUTLASTN m l) = BUTLASTN m (LASTN (n + m) l)", "\u2200(l :\u03b1 list). DROP (LENGTH l) l = ([] :\u03b1 list)", "\u2200(n :num) (f :num -> \u03b1). NULL (GENLIST f n) \u21d4 n = (0 :num)", "\u2200(P :\u03b1 list -> bool). (\u2200(l :\u03b1 list). LENGTH l = (0 :num) \u21d2 P l) \u21d4 P ([] :\u03b1 list)", "\u2200(y :\u03b1) (x :\u03b1) (l :\u03b1 list). MEM y (SNOC x l) \u21d4 y = x \u2228 MEM y l", "\u2200(n :num) (k :num). SUM (REPLICATE n k) = n * k", "(n :num) = LENGTH (l1 :\u03b1 list) \u21d2 ZIP (l1,COUNT_LIST n) = GENLIST (\u03bb(n :num). (EL n l1,n)) (LENGTH l1)", "\u2200(l1 :num list) (l2 :num list). SUM (l1 ++ l2) = SUM l1 + SUM l2", "\u2200(n :num) (l :\u03b1 list). n < LENGTH l \u21d2 DROP n l = EL n l::DROP (SUC n) l", "\u2200(x :\u03b1 list). x \u227c x", "\u2200(P :\u03b1 -> bool) (l :\u03b1 list). FILTER P l = ([] :\u03b1 list) \u21d4 EVERY (\u03bb(x :\u03b1). \u00acP x) l", "\u2200(l :\u03b1 list). NULL l \u21d4 LENGTH l = (0 :num)", "\u2200(n :num) (m :num) (l :\u03b1 list). DROP n (DROP m l) = DROP (n + m) l", "\u2200(P :\u03b1 -> bool) (Q :\u03b1 -> bool) (l :\u03b1 list). (\u2200(x :\u03b1). MEM x l \u2227 P x \u21d2 Q x) \u2227 EVERY P l \u21d2 EVERY Q l", "\u2200(l :\u03b1 list). NULL l \u21d4 l = ([] :\u03b1 list)", "MAP (\u03bb((x :\u03b1),(y :\u03b2),(z :\u03b3)). x) (funs :(\u03b1 # \u03b2 # \u03b3) list) = MAP (FST :\u03b1 # \u03b2 # \u03b3 -> \u03b1) funs", "\u2200(n :num) (ls :\u03b1 list). n < LENGTH ls \u21d2 LUPDATE (EL n ls) n ls = ls", "\u2200(l :\u03b1 list). LENGTH l = FOLDR (\u03bb(x :\u03b1) (l' :num). SUC l') (0 :num) l", "\u2200(P :\u03b1 -> bool) (l :\u03b1 list). \u00acEXISTS P l \u21d4 EVERY ($\u00ac \u2218 P) l", "\u2200(n :num) (x :\u03b1). LENGTH (REPLICATE n x) = n", "\u2200(l1 :\u03b1 list) (l2 :\u03b1 list) (l3 :\u03b1 list). (\u2200(n :num). n < LENGTH l1 \u2227 (R :\u03b1 -> \u03b1 -> bool) (EL n l1) (EL n l2) \u2227 R (EL n l2) (EL n l3) \u21d2 R (EL n l1) (EL n l3)) \u2227 LIST_REL R l1 l2 \u2227 LIST_REL R l2 l3 \u21d2 LIST_REL R l1 l3", "\u2200(x :\u03b1) (l :\u03b1 list). REVERSE (SNOC x l) = x::REVERSE l", "\u2200(ls :num list). SUM ls = (0 :num) \u21d4 \u2200(x :num). MEM x ls \u21d2 x = (0 :num)", "\u2200(n :num) (l1 :\u03b1 list) (l2 :\u03b1 list). l1 \u227c l2 \u2227 n < LENGTH l1 \u2227 n < LENGTH l2 \u21d2 EL n l1 = EL n l2", "\u2200(l :\u03b1 list) (x :\u03b1). l \u2260 x::l \u2227 x::l \u2260 l", "\u2200(l :\u03b1 list). IS_SUFFIX l l", "\u2200(a :\u03b1 list) (b :\u03b1 list) (c :\u03b1 list). a ++ b \u227c a ++ c \u21d4 b \u227c c", "\u2200(f :\u03b1 -> \u03b2 -> \u03b2) (e :\u03b2) (x :\u03b1) (l :\u03b1 list). FOLDR f e (SNOC x l) = FOLDR f (f x e) l", "\u2200(n :num) (l2 :\u03b1 list). n \u2264 LENGTH l2 \u21d2 \u2200(l1 :\u03b1 list). LASTN n (l1 ++ l2) = LASTN n l2", "\u2200(x :\u03b1) (l :\u03b1 list). LENGTH (SNOC x l) = SUC (LENGTH l)", "\u2200(l :\u03b1 list) (f :\u03b1 -> \u03b2). LENGTH (MAP f l) = LENGTH l", "LIST_BIND [(x :\u03b2)] (f :\u03b2 -> \u03b1 list) = f x", "\u2200(l :\u03b1 list) (x :\u03b1). ELL (LENGTH l) (SNOC x l) = if NULL l then x else HD l", "\u2200(P :num -> bool) (n :num). EVERY P (COUNT_LIST n) \u21d4 \u2200(m :num). m < n \u21d2 P m", "(l1 :\u03b1 list) ++ (l2 :\u03b1 list) = [(e :\u03b1)] \u21d4 l1 = [e] \u2227 l2 = ([] :\u03b1 list) \u2228 l1 = ([] :\u03b1 list) \u2227 l2 = [e]", "\u2200(P :\u03b1 -> bool) (ls :\u03b1 list). NULL (FILTER P ls) \u21d4 \u2200(x :\u03b1). MEM x ls \u21d2 \u00acP x", "\u2200(f :\u03b1 -> bool) (l :\u03b1 list). FILTER f (FILTER f l) = FILTER f l", "\u2200(l :\u03b1 list). l \u2260 ([] :\u03b1 list) \u21d2 FRONT l ++ [LAST l] = l", "\u2200(pl :(\u03b1 # \u03b2) list). LENGTH (FST (UNZIP pl)) = LENGTH pl \u2227 LENGTH (SND (UNZIP pl)) = LENGTH pl", "\u2200(l1 :\u03b1 list) (l2 :\u03b1 list). REVERSE (l1 ++ l2) = REVERSE l2 ++ REVERSE l1", "\u2200(x :\u03b1 list) (l :\u03b1 list list). FLAT (SNOC x l) = FLAT l ++ x", "\u2200(xs :\u03b1 list). FILTER (\u03bb(x :\u03b1). F) xs = ([] :\u03b1 list)", "\u2200(f :\u03b1 -> \u03b2) (l :\u03b1 list) (a :\u03b1). MEM a l \u21d2 MEM (f a) (MAP f l)", "\u2200(f :\u03b1 -> \u03b2) (l1 :\u03b1 list) (l2 :\u03b1 list). INJ f (set l1 \u222a set l2) \ud835\udd4c(:\u03b2) \u21d2 (MAP f l1 = MAP f l2 \u21d4 l1 = l2)", "\u2200(m :num) (n :num) (l :\u03b1 list). m \u2264 n \u2227 n \u2264 LENGTH l \u21d2 BUTLASTN m (LASTN n l) = LASTN (n \u2212 m) (BUTLASTN m l)", "(\u2200(x :\u03b1) (y :\u03b2). (R1 :\u03b1 -> \u03b2 -> bool) x y \u21d2 (R2 :\u03b1 -> \u03b2 -> bool) x y) \u21d2 LIST_REL R1 (l1 :\u03b1 list) (l2 :\u03b2 list) \u21d2 LIST_REL R2 l1 l2", "\u2200(n :num) (x :\u03b1). REPLICATE n x = GENLIST (K x :num -> \u03b1) n", "\u2200(l :\u03b1 list) (x :\u03b1). BUTLASTN (LENGTH l) (x::l) = [x]", "\u2200(x :\u03b1) (L :\u03b1 list list). MEM x (FLAT L) \u21d4 \u2203(l :\u03b1 list). MEM l L \u2227 MEM x l", "MAP (\u03bb(x :\u03b1). x) (l :\u03b1 list) = l \u2227 MAP (I :\u03b1 -> \u03b1) l = l", "\u2200(f :\u03b2 -> \u03b1 -> \u03b2) (e :\u03b2) (x :\u03b1) (l :\u03b1 list). FOLDL f e (SNOC x l) = f (FOLDL f e l) x", "(\u2200(l :\u03b1 list). l ++ ([] :\u03b1 list) = l) \u2227 \u2200(l :\u03b2 list). ([] :\u03b2 list) ++ l = l", "EVERY (P :\u03b1 -> bool) (FLAT (ls :\u03b1 list list)) \u21d4 EVERY (EVERY P) ls", "\u2200(P :\u03b1 -> bool) (l1 :\u03b1 list) (l2 :\u03b1 list). EVERY P l1 \u21d2 dropWhile P (l1 ++ l2) = dropWhile P l2", "\u2200(l :\u03b1 list) (m :num) (x :\u03b1). MEM x (TAKE m l) \u21d2 MEM x l", "\u2200(y :\u03b1) (l :\u03b1 list). MEM y l \u21d4 FOLDR (\u03bb(x :\u03b1) (l' :bool). y = x \u2228 l') F l"]